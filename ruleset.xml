<?xml version="1.0"?>
<ruleset name="jonlink">
    <description>Custom PSR2 Standard for jonlink</description>
    <config name="installed_paths" value="vendor/slevomat/coding-standard/SlevomatCodingStandard/"/>

    <rule ref="PSR2">
        <exclude name="Generic.Files.LineLength"/>
        <exclude name="PSR2.Classes.ClassDeclaration"/>
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration"/>
    </rule>

    <!-- Enforce whitespace -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="spacingBeforeFirst" value="0" />
            <property name="spacingAfterLast" value="0" />
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing"/>
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Generic.Formatting.SpaceAfterCast">
        <properties>
            <property name="spacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
            <property name="spacing" value="1"/>
        </properties>
    </rule>
        <rule ref="Generic.Formatting.SpaceAfterNot">
        <properties>
            <property name="spacing" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="0"/>
            <property name="linesCountAfterNamespace" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!-- imports -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/> <!-- forbid uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/> <!-- require alphabetic order of imports -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing"> <!-- require empty newlines before and after uses -->
        <properties>
            <property name="linesCountAfterLastUse" value="1"/>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="0"/>
        </properties>
    </rule>

    <!-- no dead code -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter">
        <severity>4</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- formatting, styles, & other standards -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod">
        <severity>1</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration" />
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
    <rule ref="Generic.Formatting.MultipleStatementAlignment"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/><!-- don't require closing brace at the same level as opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/><!-- don't require value to be aligned with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/><!-- don't require key's to be aligned with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/><!-- don't require multiline arrays -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/><!-- don't require singleline arrays -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/><!-- required, but low level (handled below) -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified"/><!-- in some rare cases we break this rule -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeySpecified"/><!-- in some rare cases we break this rule -->
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned">
        <severity>3</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <severity>1</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/> <!-- required where possible -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses">
        <severity>2</severity>
        <properties>
            <property name="ignoreComplexTernaryConditions" value="true"/>
        </properties>
        <severity>1</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="PEAR.ControlStructures.MultiLineCondition"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- gut checks -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>
    <rule ref="Generic.PHP.NoSilencedErrors">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.PHP.DiscouragedFunctions">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>
</ruleset>
